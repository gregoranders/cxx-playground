CMAKE_MINIMUM_REQUIRED(VERSION 3.14 FATAL_ERROR)

PROJECT("${CMAKE_PROJECT_NAME}Binary" LANGUAGES CXX
    VERSION ${CMAKE_PROJECT_VERSION} DESCRIPTION "${CMAKE_PROJECT_NAME} Binary")

SET(PROJECT_BINARY "${CMAKE_PROJECT_NAME}${BUILD_ARCH_BITS}")

FIND_PACKAGE(Threads REQUIRED)

CONFIGURE_FILE(include/config.hpp.in include/config.hpp @ONLY)

ADD_EXECUTABLE(${PROJECT_BINARY}
  "${CMAKE_CURRENT_BINARY_DIR}/include/config.hpp"
  include/types.hpp
  main.cpp
)

TARGET_COMPILE_OPTIONS(${PROJECT_BINARY}
  PUBLIC
    "-pedantic"
    "-pedantic-errors"
    "-Werror"
)

TARGET_INCLUDE_DIRECTORIES(${PROJECT_BINARY}
  PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
)

IF(UNIX AND NOT APPLE)
  TARGET_LINK_LIBRARIES(${PROJECT_BINARY}
    PUBLIC
      rt
      dl
  )
ENDIF()

TARGET_LINK_LIBRARIES(${PROJECT_BINARY}
  PUBLIC
    Threads::Threads
)

IF(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  # using CLang
  TARGET_COMPILE_OPTIONS(${PROJECT_BINARY}
    PUBLIC
      "-stdlib=libc++"
  )
  TARGET_LINK_LIBRARIES(${PROJECT_BINARY}
    PUBLIC
      c++
  )
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # using GCC
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  # using Intel C++
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  # using Visual Studio C++
ENDIF()

INSTALL(TARGETS ${PROJECT_BINARY}
  EXPORT ${PROJECT_BINARY}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCDIR}
)

